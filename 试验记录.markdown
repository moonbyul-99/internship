## 2024.06.20

搭建基础baseline，直接把血氧和心率数据做concat

数据存在样本不平衡，0的比例很高，在训练集上全预测0能够达到0.8的准确率 

```
if pred all zero, accuracy is 0.7938748335552597
if pred all one, accuracy is 0.08575233022636485
if pred all two, accuracy is 0.1203728362183755
```

使用lgb构建分类模型，在如下参数设置下得到结果如下：
```python
lgb_train = lgb.Dataset(train_X, train_label)
lgb_dev = lgb.Dataset(dev_X, dev_label, reference=lgb_train)
lgb_params = {'learning_rate': 0.1, 'max_depth': -1, 'min_child_weight': 1,
            'colsample_bytree': 1, 'subsample': 1, 'reg_lambda': 0.5, 'reg_alpha': 0.5,'num_leaves':31,
            'seed': 33,'verbose':1,  'objective':'multiclass' , 'num_class': 3}  
record = {}
gbm = lgb.train(lgb_params, lgb_train, num_boost_round= 200,valid_sets=[lgb_train, lgb_dev],
                callbacks=[lgb.record_evaluation(record)])
```
```
 acc score 0.8553928095872171
 roc_auc score [0.75898065 0.68084793 0.66993435]
[3276.  181.  298.] [2981.  322.  452.]
 acc score in class 0: 0.8884154460719041
 acc score in class 1: 0.9310252996005326
 acc score in class 2: 0.8913448735019973
```

训练Loss如下：
![alt text](image-1.png)

调整参数设置为：
```python
lgb_train = lgb.Dataset(train_X, train_label)
lgb_dev = lgb.Dataset(dev_X, dev_label, reference=lgb_train)
lgb_params = {'learning_rate': 0.01, 'max_depth': -1, 'min_child_weight': 1,
            'colsample_bytree': 1, 'subsample': 1, 'reg_lambda': 0.5, 'reg_alpha': 0.5,'num_leaves':31,
            'seed': 33,'verbose':1,  'objective':'multiclass' , 'num_class': 3}  # l1 class 8,l2 class 31

record = {}
gbm = lgb.train(lgb_params, lgb_train, num_boost_round= 2000,valid_sets=[lgb_train, lgb_dev],
                callbacks=[lgb.record_evaluation(record)])
```

得到结果如下：
```
  acc score 0.9376830892143808  ## 这个结果不能复现了。。。感觉可能是一次意外
 roc_auc score [0.49312875 0.51085826 0.49507353]
[3258.  182.  315.] [2981.  322.  452.]
 acc score in class 0: 0.7115845539280958
 acc score in class 1: 0.877496671105193
 acc score in class 2: 0.8138482023968042
 ```

 训练Loss如下：
 ![alt text](image.png) 


后面尝试了几类其他的分类模型 knn, svm, logistic regression, random forest,以上模型总体准确率在0.8左右

后面尝试使用20个PCs做为额外特征，但是lgb模型性能反而下降了，0.85左右，猜想可能是在PC1上过拟合了（解释80%的方差）

knn, logistic regression, svm, rf没有很多变化。看起来线性模型加线性特征影响不大。

### 今日提交结果：

- res_1.csv: lgb base 0.01学习率 2000次迭代的结果， 得分 0.504762

- 提交了一个全预测为0的结果， 得分 0.33333， 应该是A榜数据是均匀分布的，没法搞歪门邪道

- res_2.csv: 基于 res_1.csv, 首先根据 0 的预测，选取top 385 定位0， 之后将这些确定为0的样本丢置，在剩余的样本中，根据 1 的预测，选取top 385 定为1，剩下的385为2，得分 0.574026

- res_3.csv: 与 res_2 类似，但是顺序是倒着来的，先2再1最后0，结果未测试。

### to do:

- [x] 构建交叉验证流程，验证新的构建特征的效果，例如 血氧/心率 ……
- [ ] 检验数据中异常值与结果的关系
- [ ] 尝试 tapPFN和openFE的效果
- [ ] 尝试transformer类型的模型进行无监督训练

## 2024.06.21

试了一下bo/hr 的比值，额外的180个特征，没有看到明显的变化

```
 acc score 0.8540612516644474
 roc_auc score [0.76271381 0.66963777 0.66817609]
[3274.  188.  293.] [2981.  322.  452.]
 acc score in class 0: 0.8905459387483355
 acc score in class 1: 0.925965379494008
 acc score in class 2: 0.8916111850865512
```

## 2024.06.25 

完成了交叉验证流程，提交res_4.csv,得分 0.54 

仅使用原始360个特征，做5折交叉验证，集成5个模型的结果，得分调整策略先2再1最后0 

离线 cv 结果：
```python
dev set evaluation result ============================================================
        acc score     acc_0     acc_1     acc_2  label_auc_0  label_auc_1  \
fold_0   0.855792  0.889880  0.928495  0.893209     0.763490     0.684389   
fold_1   0.848069  0.889614  0.920639  0.885885     0.765475     0.661096   
fold_2   0.853395  0.892810  0.925433  0.888549     0.776335     0.686232   
fold_3   0.851931  0.888815  0.925699  0.889348     0.767263     0.672796   
fold_4   0.852976  0.889999  0.923692  0.892263     0.766203     0.669102   

        label_auc_2  score_auc_0  score_auc_1  score_auc_2  
fold_0     0.670994     0.916923     0.881789     0.840631  
fold_1     0.657283     0.918157     0.879662     0.832394  
fold_2     0.668822     0.914961     0.887685     0.825955  
fold_3     0.674528     0.908482     0.879182     0.838011  
fold_4     0.673803     0.920235     0.864051     0.845901  
train set evaluation result ============================================================
        acc score     acc_0     acc_1     acc_2  label_auc_0  label_auc_1  \
fold_0   0.952295  0.954526  0.981790  0.968275     0.894854     0.899495   
fold_1   0.951330  0.953860  0.980093  0.968707     0.893060     0.889424   
fold_2   0.952795  0.955058  0.981491  0.969040     0.896325     0.898100   
fold_3   0.952329  0.955291  0.981025  0.968341     0.896396     0.894112   
fold_4   0.950333  0.952730  0.981092  0.966844     0.890196     0.895421   

        label_auc_2  score_auc_0  score_auc_1  score_auc_2  
fold_0     0.882666     0.973548     0.990373     0.975033  
fold_1     0.885299     0.972963     0.989291     0.978391  
fold_2     0.886085     0.974394     0.991251     0.977723  
fold_3     0.885568     0.975147     0.990072     0.979400  
fold_4     0.876720     0.972666     0.990975     0.976507  
```


进行特征增广，使用的特征有
```python
  self.bo
  self.hr
  self.bo_hr_minus()
  self.bo_hr_plus()
  self.bo_hr_product()
  self.bo_hr_ratio()
  self.statistics_feature()
```
共计910个特征，离线5折交叉验证cv结果如下：

```python
dev set evaluation result ============================================================
        acc score     acc_0     acc_1     acc_2  label_auc_0  label_auc_1  \
fold_0   0.854727  0.892543  0.927031  0.889880     0.787885     0.695549   
fold_1   0.847004  0.888948  0.921971  0.883089     0.781077     0.684339   
fold_2   0.856991  0.896538  0.925832  0.891611     0.800923     0.706854   
fold_3   0.850732  0.886551  0.925832  0.889081     0.781845     0.691833   
fold_4   0.853243  0.891464  0.924757  0.890265     0.787689     0.696420   

        label_auc_2  score_auc_0  score_auc_1  score_auc_2  
fold_0     0.692972     0.915368     0.892672     0.871822  
fold_1     0.670971     0.922637     0.896743     0.863709  
fold_2     0.700640     0.919651     0.898903     0.858323  
fold_3     0.697292     0.914054     0.895301     0.860903  
fold_4     0.691286     0.922459     0.890004     0.875610  
train set evaluation result ============================================================
        acc score     acc_0     acc_1     acc_2  label_auc_0  label_auc_1  \
fold_0   0.971936  0.972602  0.990446  0.980825     0.936901     0.945546   
fold_1   0.969440  0.970205  0.989480  0.979194     0.931985     0.939392   
fold_2   0.972236  0.973235  0.989913  0.981324     0.938375     0.942617   
fold_3   0.971138  0.972170  0.990346  0.979760     0.937515     0.944415   
fold_4   0.970340  0.971138  0.989880  0.979660     0.933229     0.942072   

        label_auc_2  score_auc_0  score_auc_1  score_auc_2  
fold_0     0.928589     0.988517     0.997285     0.992047  
fold_1     0.924320     0.989060     0.997065     0.992067  
fold_2     0.931618     0.988317     0.996908     0.991608  
fold_3     0.929177     0.988487     0.997844     0.991182  
fold_4     0.924108     0.989081     0.997596     0.990786  
```

离线10折交叉验证结果如下：

```python
dev set evaluation result ============================================================
        acc score     acc_0     acc_1     acc_2  label_auc_0  label_auc_1  \
fold_0   0.857257  0.896405  0.926498  0.891611     0.798926     0.702294   
fold_1   0.862051  0.893742  0.932357  0.898003     0.787205     0.697055   
fold_2   0.849534  0.894274  0.920373  0.884421     0.798062     0.690501   
fold_3   0.850067  0.890280  0.922237  0.887617     0.782633     0.683077   
fold_4   0.851664  0.892410  0.920639  0.890280     0.792106     0.682204   
fold_5   0.858855  0.895073  0.930226  0.892410     0.794739     0.719811   
fold_6   0.850599  0.881225  0.930493  0.889481     0.767843     0.701664   
fold_7   0.858056  0.896405  0.929161  0.890546     0.797013     0.698121   
fold_8   0.859387  0.899334  0.926764  0.892676     0.798616     0.697706   
fold_9   0.849760  0.889451  0.918753  0.891316     0.790732     0.678365   

        label_auc_2  score_auc_0  score_auc_1  score_auc_2  
fold_0     0.701595     0.915261     0.891982     0.864261  
fold_1     0.717640     0.919597     0.893757     0.880047  
fold_2     0.684140     0.921122     0.909304     0.861293  
fold_3     0.682137     0.925788     0.887706     0.869164  
fold_4     0.697973     0.920387     0.893175     0.877265  
fold_5     0.695365     0.915507     0.904476     0.843878  
fold_6     0.689881     0.907583     0.897573     0.856791  
fold_7     0.703854     0.918999     0.900690     0.869732  
fold_8     0.698381     0.923463     0.909290     0.874809  
fold_9     0.705255     0.925280     0.873143     0.887314  
train set evaluation result ============================================================
...
fold_6     0.915915     0.986052     0.996657     0.987874  
fold_7     0.916155     0.984938     0.996038     0.989226  
fold_8     0.914921     0.984895     0.996491     0.988716  
fold_9     0.911960     0.986010     0.995887     0.986522  
```

基于以上结果，集成10个模型的结果，得分调整策略先2再1最后0，提交res_5.csv,得分 0.53 

同样的结果，得分调整策略为先0再1最后2，提交res_6.csv, 得分0.59

### to do
- [ ] 尝试一下stack的做法，感觉最后一步的调整很关键
- [x] 尝试加入穿越特征，例如自编码器或者PCA
- [x] 尝试先分正常异常，再在异常中二分类

## 2024.06.26
lgb, 910 feature, 正常异常预测结果如下

```python
dev set evaluation result ============================================================
        acc score     acc_0     acc_1  label_auc_0  label_auc_1  score_auc_0  \
fold_0   0.897204  0.897204  0.897204     0.819516     0.819516     0.921978   
fold_1   0.899867  0.899867  0.899867     0.823585     0.823585     0.929845   
fold_2   0.892943  0.892943  0.892943     0.812050     0.812050     0.915914   
fold_3   0.896405  0.896405  0.896405     0.814709     0.814709     0.918864   
fold_4   0.893475  0.893475  0.893475     0.817646     0.817646     0.924550   
fold_5   0.899068  0.899068  0.899068     0.826908     0.826908     0.924426   
fold_6   0.886285  0.886285  0.886285     0.803074     0.803074     0.910132   
fold_7   0.894541  0.894541  0.894541     0.815926     0.815926     0.922357   
fold_8   0.898535  0.898535  0.898535     0.814820     0.814820     0.925780   
fold_9   0.892381  0.892381  0.892381     0.821270     0.821270     0.922499   

        score_auc_1  
fold_0     0.921978  
fold_1     0.929845  
fold_2     0.915914  
fold_3     0.918864  
fold_4     0.924550  
fold_5     0.924426  
fold_6     0.910132  
fold_7     0.922357  
fold_8     0.925780  
fold_9     0.922499  
train set evaluation result ============================================================
        acc score     acc_0     acc_1  label_auc_0  label_auc_1  score_auc_0  \
fold_0   0.952536  0.952536  0.952536     0.906722     0.906722     0.985717   
fold_1   0.952210  0.952210  0.952210     0.906889     0.906889     0.985417   
fold_2   0.953483  0.953483  0.953483     0.909550     0.909550     0.985860   
fold_3   0.953512  0.953512  0.953512     0.908028     0.908028     0.985065   
fold_4   0.953394  0.953394  0.953394     0.909228     0.909228     0.985828   
fold_5   0.951855  0.951855  0.951855     0.904381     0.904381     0.984939   
fold_6   0.953572  0.953572  0.953572     0.908384     0.908384     0.986306   
fold_7   0.953098  0.953098  0.953098     0.908989     0.908989     0.985678   
fold_8   0.953009  0.953009  0.953009     0.908018     0.908018     0.984976   
fold_9   0.952892  0.952892  0.952892     0.907265     0.907265     0.984501   

        score_auc_1  
fold_0     0.985717  
fold_1     0.985417  
fold_2     0.985860  
fold_3     0.985065  
fold_4     0.985828  
fold_5     0.984939  
fold_6     0.986306  
fold_7     0.985678  
fold_8     0.984976  
fold_9     0.984501  
```

lgb, 910 feature, 异常二分类预测结果如下 

```python
dev set evaluation result ============================================================
        acc score     acc_0     acc_1  label_auc_0  label_auc_1  score_auc_0  \
fold_0   0.676129  0.676129  0.676129     0.658727     0.658727     0.753480   
fold_1   0.678295  0.678295  0.678295     0.657567     0.657567     0.738038   
fold_2   0.691214  0.691214  0.691214     0.675775     0.675775     0.753332   
fold_3   0.686047  0.686047  0.686047     0.668671     0.668671     0.749272   
fold_4   0.692506  0.692506  0.692506     0.675988     0.675988     0.750495   
fold_5   0.680879  0.680879  0.680879     0.668265     0.668265     0.770839   
fold_6   0.705426  0.705426  0.705426     0.691963     0.691963     0.765528   
fold_7   0.697674  0.697674  0.697674     0.684432     0.684432     0.761021   
fold_8   0.693798  0.693798  0.693798     0.674415     0.674415     0.756459   
fold_9   0.639535  0.639535  0.639535     0.619469     0.619469     0.703492   

        score_auc_1  
fold_0     0.753480  
fold_1     0.738038  
fold_2     0.753332  
fold_3     0.749272  
fold_4     0.750495  
fold_5     0.770839  
fold_6     0.765528  
fold_7     0.761021  
fold_8     0.756459  
fold_9     0.703492  
train set evaluation result ============================================================
        acc score     acc_0     acc_1  label_auc_0  label_auc_1  score_auc_0  \
fold_0   0.994401  0.994401  0.994401     0.993271     0.993271     0.999902   
fold_1   0.994259  0.994259  0.994259     0.993151     0.993151     0.999823   
fold_2   0.994833  0.994833  0.994833     0.993890     0.993890     0.999904   
fold_3   0.993972  0.993972  0.993972     0.992905     0.992905     0.999825   
fold_4   0.993254  0.993254  0.993254     0.991993     0.991993     0.999707   
fold_5   0.993685  0.993685  0.993685     0.992411     0.992411     0.999943   
fold_6   0.994976  0.994976  0.994976     0.994063     0.994063     0.999924   
fold_7   0.994976  0.994976  0.994976     0.994013     0.994013     0.999958   
fold_8   0.995694  0.995694  0.995694     0.994925     0.994925     0.999919   
fold_9   0.993972  0.993972  0.993972     0.992806     0.992806     0.999835   

        score_auc_1  
fold_0     0.999902  
fold_1     0.999823  
fold_2     0.999904  
fold_3     0.999825  
fold_4     0.999707  
fold_5     0.999943  
fold_6     0.999924  
fold_7     0.999958  
fold_8     0.999919  
fold_9     0.999835  
```

看起来，01分类准确率为0.9，12分类准确率为0.6，利用贝叶斯公式，理论上在测试集上能够达到的精度为0.73。

二阶段分类，交叉验证准确率如下, 看起来高于直接三分类的结果

```
fold 0: 0.918774966711052
fold 1: 0.9174434087882823
fold 2: 0.9171770972037283
fold 3: 0.918774966711052
fold 4: 0.9129161118508655
fold 5: 0.9201065246338216
fold 6: 0.9083888149134487
fold 7: 0.9121171770972037
fold 8: 0.9272969374167777
fold 9: 0.9083644112946191
``` 

尝试加入30维穿越PCA,二阶段lgb结果如下,看起来别前面结果好了些

```
fold 0: 0.922237017310253
fold 1: 0.922237017310253
fold 2: 0.9251664447403461
fold 3: 0.9219707057256991
fold 4: 0.9158455392809587
fold 5: 0.9198402130492677
fold 6: 0.9142476697736351
fold 7: 0.9217043941411451
fold 8: 0.9302263648468708
fold 9: 0.917687799680341
```

从特征重要性看，统计特征和pca特征很重要,下面展示了01分类器的特征受益和12分类器的特征分裂数目，可以看到top30特征在都在900之后。

![alt text](image-3.png)
![alt text](image-2.png)

在30维穿越PCA数据下，尝试了修改更小的学习率0.01，得到结果如下,看起来降低了，这部分的预测结果在res_10.csv中

```python
fold 0: 0.8745672436750999
fold 1: 0.8753661784287616
fold 2: 0.8687083888149134
fold 3: 0.8721704394141145
fold 4: 0.8644474034620506
fold 5: 0.8750998668442077
fold 6: 0.8641810918774967
fold 7: 0.870572569906791
fold 8: 0.8822902796271638
fold 9: 0.8649440596696857
```

### 今日提交结果：

1. res_7.csv 使用二阶段lgb分类得到的结果，得分 0.6017，结果按照之前方法集成。
2. res_8.csv 全1预测，验证下A榜数据情况，得分0.3333，确认等比例分布
3. res_9.csv 二阶段lgb分类，加入30个穿越PCA特征，得分 0.598，结果按照之前方法集成。